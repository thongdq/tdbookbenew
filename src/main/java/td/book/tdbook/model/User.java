package td.book.tdbook.model;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import td.book.tdbook.security.oauth2.AuthProvider;

//@Data
//Lombok's @Data annotation on my model objects to auto-generate getters, setters, and other standard methods.
//The toString() method might generated by Lombok introduced a circular dependency => java.lang.StackOverflowError
// @JsonIdentityInfo(
//     generator = ObjectIdGenerators.PropertyGenerator.class,
//     property = "id")
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @NonNull private Long id;

    @Column(name = "USERNAME", length = 100)
    private String userName;

    @Column(name = "EMAIL", nullable = false, length = 255)
    private String email;

    @Column(name = "PASSWORD", nullable = false, length = 100)
    private String password;

    @Column
    private String avatar;

    @OneToMany(
        mappedBy = "user",
        fetch = FetchType.LAZY
    )
    //@JsonManagedReference //Bidirectional Relationships: Infinite Recursion error -> https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion, https://shareprogramming.net/jackson-json-de-quy-vo-tan-trong-moi-quan-he-2-chieu/
    //@JsonDeserialize(using = UserRoleListDeserializer.class)
    private List<UserRole> userRoles;

    @OneToMany(
        mappedBy = "user",
        fetch = FetchType.LAZY
    )
    private List<Book> books;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    private List<Comment> comments;

    @Column(name = "emailverified")
    private Boolean emailVerified;

    //@NotNull
    @Enumerated(EnumType.STRING)
    private AuthProvider provider;

    @Column(name = "providerid")
    private String providerId;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "image_id")
    private Image image;

    public User(String username, String email, String password,
                List<UserRole> userRoles, Boolean emailVerified,
                AuthProvider provider, String providerId) {
        this.userName = username;
        this.email = email;
        this.password = password;
        this.userRoles = userRoles;
        this.emailVerified = emailVerified;
        this.provider = provider;
        this.providerId = providerId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public List<UserRole> getUserRoles() {
        return userRoles;
    }

    public void setUserRoles(List<UserRole> userRoles) {
        this.userRoles = userRoles;
    }

    public List<Book> getBooks() {
        return books;
    }

    public void setBooks(List<Book> books) {
        this.books = books;
    }

    public Boolean getEmailVerified() {
        return emailVerified;
    }

    public void setEmailVerified(Boolean emailVerified) {
        this.emailVerified = emailVerified;
    }

    public AuthProvider getProvider() {
        return provider;
    }

    public void setProvider(AuthProvider provider) {
        this.provider = provider;
    }

    public String getProviderId() {
        return providerId;
    }

    public void setProviderId(String providerId) {
        this.providerId = providerId;
    }

    public List<Comment> getComments() {
        return comments;
    }

    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }

    public Image getImage() {
        return image;
    }

    public void setImage(Image image) {
        this.image = image;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }



    public static class UserBuilder {
        private String userName;
        private String email;
        private String password;
        private List<UserRole> userRoles;
        private Boolean emailVerified;
        private AuthProvider provider;
        private String providerId;

        // public UserBuilder withId(Long id) {
        //     this.id = id;
        //     return this;
        // }

        public UserBuilder withUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public UserBuilder withEmail(String email) {
            this.email = email;
            return this;
        }

        public UserBuilder withPassword(String password) {
            this.password = password;
            return this;
        }

        public UserBuilder withUserRoles(List<UserRole> userRoles) {
            this.userRoles = userRoles;
            return this;
        }

        public UserBuilder isEmailVerified(boolean emailVerified) {
            this.emailVerified = emailVerified;
            return this;
        }

        public UserBuilder withProvider(AuthProvider provider) {
            this.provider = provider;
            return this;
        }

        public UserBuilder withProviderId(String providerId) {
            this.providerId = providerId;
            return this;
        }

        public User build() {
            User user = new User(
                this.userName, this.email, this.password, this.userRoles,
                this.emailVerified, this.provider, this.providerId);

            return user;
        }

    }

}
